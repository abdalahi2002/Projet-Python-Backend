# Generated by Django 5.0.1 on 2024-02-12 14:34

import django.db.models.deletion
import django.utils.timezone
import dons_des_sangs.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(blank=True, max_length=100, null=True)),
                ('last_name', models.CharField(blank=True, max_length=100, null=True)),
                ('tel', models.CharField(max_length=8, unique=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('email', models.EmailField(max_length=70, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=70, unique=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('otp', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Type_Sang',
            fields=[
                ('nom', models.CharField(max_length=3, primary_key=True, serialize=False, validators=[dons_des_sangs.models.validate_type_sang])),
            ],
        ),
        migrations.CreateModel(
            name='Wilaya',
            fields=[
                ('nom', models.CharField(max_length=100, primary_key=True, serialize=False, validators=[dons_des_sangs.models.validate_mauritanian_wilaya_name])),
            ],
        ),
        migrations.CreateModel(
            name='Donateur',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, to=settings.AUTH_USER_MODEL)),
                ('id_d', models.AutoField(primary_key=True, serialize=False)),
                ('date_naissance', models.DateField(blank=True, null=True)),
                ('otp', models.CharField(blank=True, max_length=6, null=True)),
                ('otp_created_at', models.DateTimeField(blank=True, null=True)),
                ('otp_is_used', models.BooleanField(default=False)),
                ('type_sang', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dons_des_sangs.type_sang')),
                ('wilaya', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dons_des_sangs.wilaya')),
            ],
            options={
                'abstract': False,
            },
            bases=('dons_des_sangs.user',),
        ),
    ]
